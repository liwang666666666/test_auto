# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fc.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import base_pb2 as base__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x08\x66\x63.proto\x12\x06\x66light\x1a\nbase.proto\"\xe9\x07\n\x10\x46\x43NavigationInfo\x12?\n\x12horizontal_ability\x18\x01 \x01(\x0e\x32#.flight.HorizontalNavigationAbility\x12;\n\x10vertical_ability\x18\x02 \x01(\x0e\x32!.flight.VerticalNavigationAbility\x12\x31\n\x0byaw_ability\x18\x03 \x01(\x0e\x32\x1c.flight.YawNavigationAbility\x12\x16\n\x01q\x18\x04 \x01(\x0b\x32\x0b.base.Vec4f\x12\x1f\n\nposition_f\x18\x05 \x01(\x0b\x32\x0b.base.Vec3f\x12\x1f\n\nvelocity_f\x18\x06 \x01(\x0b\x32\x0b.base.Vec3f\x12\x1f\n\nposition_e\x18\x07 \x01(\x0b\x32\x0b.base.Vec3d\x12\x17\n\x0fground_distance\x18\x08 \x01(\x02\x12\x1f\n\x17height_to_takeoff_point\x18\t \x01(\x02\x12!\n\x19\x64istance_to_takeoff_point\x18\n \x01(\x02\x12\x1c\n\x14num_of_gps_satellite\x18\x0b \x01(\x05\x12*\n\x15\x61ngular_rate_nobias_b\x18\x0c \x01(\x0b\x32\x0b.base.Vec3f\x12)\n\x0c\x62rake_status\x18\r \x01(\x0e\x32\x13.flight.BrakeStatus\x12-\n\x18takeoff_point_position_e\x18\x0e \x01(\x0b\x32\x0b.base.Vec3d\x12-\n\x18takeoff_point_position_f\x18\x0f \x01(\x0b\x32\x0b.base.Vec3f\x12\x18\n\x10\x66\x63\x32geo_angle_rad\x18\x10 \x01(\x02\x12\x19\n\x11\x64rone_geo_yaw_deg\x18\x11 \x01(\x02\x12 \n\x18gps_position_accuracy_mm\x18\x12 \x01(\x05\x12\x1f\n\x17gps_speed_accuracy_mm_s\x18\x13 \x01(\x05\x12\x19\n\x11\x66light_distance_m\x18\x14 \x01(\x02\x12\x17\n\x0f\x66light_time_sec\x18\x15 \x01(\x02\x12\x1c\n\x14left_servo_angle_deg\x18\x16 \x01(\x02\x12\x1d\n\x15right_servo_angle_deg\x18\x17 \x01(\x02\x12\x16\n\x0eleft_motor_rpm\x18\x18 \x01(\x02\x12\x17\n\x0fright_motor_rpm\x18\x19 \x01(\x02\x12\x0e\n\x06\x66ly_ID\x18\x1a \x01(\x05\x12\x11\n\tmax_speed\x18\x1b \x01(\x02\x12\x12\n\nmax_height\x18\x1c \x01(\x02\x12\x15\n\rmax_pitch_deg\x18\x1d \x01(\x02\x12\x11\n\timu0_temp\x18\x1e \x01(\x02\"\xcc\x01\n\x0c\x41ttitudeInfo\x12\x11\n\ttimestamp\x18\x01 \x01(\x04\x12\x16\n\x01q\x18\x02 \x01(\x0b\x32\x0b.base.Vec4f\x12*\n\x15\x61ngular_rate_nobias_b\x18\x03 \x01(\x0b\x32\x0b.base.Vec3f\x12#\n\x0e\x61\x63\x63\x65l_nobias_b\x18\x04 \x01(\x0b\x32\x0b.base.Vec3f\x12$\n\x0finit_velocity_b\x18\x05 \x01(\x0b\x32\x0b.base.Vec3f\x12\x1a\n\x12height_below_10_cm\x18\x06 \x01(\x08\"\x82\x01\n\x02\x46\x43\x12\x11\n\ttimestamp\x18\x01 \x01(\x04\x12\x36\n\x0c\x66light_state\x18\x02 \x01(\x0e\x32 .flight.FlightControlFlightState\x12\x31\n\x0fnavigation_info\x18\x03 \x01(\x0b\x32\x18.flight.FCNavigationInfo\"\xa6\x05\n\x12\x41rmcheckFailReason\x12\x13\n\x0bimu0_faulty\x18\x01 \x01(\x08\x12\x1d\n\x15imu0_need_calibration\x18\x02 \x01(\x08\x12\x13\n\x0bimu1_faulty\x18\x03 \x01(\x08\x12\x1d\n\x15imu1_need_calibration\x18\x04 \x01(\x08\x12\x16\n\x0emag_not_update\x18\x05 \x01(\x08\x12\x18\n\x10mag_wrong_params\x18\x06 \x01(\x08\x12\x15\n\rmag_no_params\x18\x07 \x01(\x08\x12\x18\n\x10sonar_not_update\x18\x08 \x01(\x08\x12\x16\n\x0esonar_abnormal\x18\t \x01(\x08\x12\x17\n\x0f\x62\x61ro_not_update\x18\n \x01(\x08\x12\x15\n\rbaro_abnormal\x18\x0b \x01(\x08\x12\x14\n\x0cproxi_broken\x18\x0c \x01(\x08\x12\x16\n\x0evns_not_update\x18\r \x01(\x08\x12\x14\n\x0cvns_abnormal\x18\x0e \x01(\x08\x12\x14\n\x0cmotor_jammed\x18\x0f \x01(\x08\x12\x14\n\x0cmotor_noload\x18\x10 \x01(\x08\x12\x14\n\x0cmotor_broken\x18\x11 \x01(\x08\x12\x15\n\rbattery_empty\x18\x12 \x01(\x08\x12 \n\x18ground_takeoff_not_level\x18\x13 \x01(\x08\x12$\n\x1cground_takeoff_height_not_ok\x18\x14 \x01(\x08\x12\x1e\n\x16hand_release_not_level\x18\x15 \x01(\x08\x12\"\n\x1ahand_release_height_not_ok\x18\x16 \x01(\x08\x12\x1e\n\x16proxi_need_calibration\x18\x17 \x01(\x08\x12\x18\n\x10proxi_not_update\x18\x18 \x01(\x08\x12\x1a\n\x12\x62\x61ro_height_exceed\x18\x19 \x01(\x08\"p\n\tRCCommand\x12\x11\n\ttimestamp\x18\x01 \x01(\x01\x12\x0c\n\x04roll\x18\x02 \x01(\x02\x12\r\n\x05pitch\x18\x03 \x01(\x02\x12\x0b\n\x03yaw\x18\x04 \x01(\x02\x12\x10\n\x08throttle\x18\x05 \x01(\x02\x12\x14\n\x0cin_arm_check\x18\x06 \x01(\x08\"\x0e\n\x0c\x46\x43\x43ommandArm\"\x11\n\x0f\x46\x43\x43ommandDisarm\"\x12\n\x10\x46\x43\x43ommandTakeOff\"\x0f\n\rFCCommandLand\"\x15\n\x13\x46\x43\x43ommandCancelLand\"\xe2\x08\n\x10\x46\x43\x43ommandControl\x12\x33\n\x08setpoint\x18\x01 \x01(\x0b\x32!.flight.FCCommandControl.SetPoint\x1a}\n\x1aHorizontalControlAttribute\x12\x0c\n\x04mode\x18\x01 \x01(\r\x12\x14\n\x0cmax_tilt_deg\x18\x02 \x01(\r\x12\x13\n\x0bmax_ang_vel\x18\x03 \x01(\r\x12\x12\n\naccel_gain\x18\x04 \x01(\r\x12\x12\n\nbrake_gain\x18\x05 \x01(\r\x1a\xc3\x03\n\x08SetPoint\x12K\n\x0ehori_ctrl_attr\x18\x01 \x01(\x0b\x32\x33.flight.FCCommandControl.HorizontalControlAttribute\x12\x46\n\x0ehori_ctrl_type\x18\x02 \x01(\x0e\x32..flight.FCCommandControl.HorizontalControlType\x12\t\n\x01x\x18\x03 \x01(\x02\x12\t\n\x01y\x18\x04 \x01(\x02\x12\x12\n\nhori_extra\x18\x05 \x01(\x02\x12\x44\n\x0evert_ctrl_type\x18\x06 \x01(\x0e\x32,.flight.FCCommandControl.VerticalControlType\x12\t\n\x01z\x18\x07 \x01(\x02\x12\x12\n\nvert_extra\x18\x08 \x01(\x02\x12>\n\ryaw_ctrl_type\x18\t \x01(\x0e\x32\'.flight.FCCommandControl.YawControlType\x12\x0b\n\x03yaw\x18\n \x01(\x02\x12\x11\n\tyaw_extra\x18\x0b \x01(\x02\x12\x14\n\x0ctimestamp_us\x18\x0c \x01(\x04\x12\x1d\n\x15is_auto_horizon_speed\x18\r \x01(\x08\"\xb4\x01\n\x15HorizontalControlType\x12)\n%HORIZONTAL_CONTROL_TYPE_POSITION_KEEP\x10\x00\x12$\n HORIZONTAL_CONTROL_TYPE_POSITION\x10\x01\x12$\n HORIZONTAL_CONTROL_TYPE_VELOCITY\x10\x02\x12$\n HORIZONTAL_CONTROL_TYPE_ATTITUDE\x10\x03\"\xa4\x01\n\x13VerticalControlType\x12%\n!VERTICAL_CONTROL_TYPE_HEIGHT_KEEP\x10\x00\x12 \n\x1cVERTICAL_CONTROL_TYPE_HEIGHT\x10\x01\x12\"\n\x1eVERTICAL_CONTROL_TYPE_VELOCITY\x10\x02\x12 \n\x1cVERTICAL_CONTROL_TYPE_THRUST\x10\x03\"v\n\x0eYawControlType\x12\x1f\n\x1bYAW_CONTROL_TYPE_ANGLE_LOCK\x10\x00\x12\x1c\n\x18YAW_CONTROL_TYPE_ANGULAR\x10\x01\x12%\n!YAW_CONTROL_TYPE_ANGULAR_VELOCITY\x10\x02\" \n\x1e\x46\x43\x43ommandGetAllowedMaxVelocity\"\x81\x02\n!FCCommandGetAllowedMaxVelocityAck\x12O\n\x06params\x18\x01 \x01(\x0b\x32?.flight.FCCommandGetAllowedMaxVelocityAck.MaxAllowedSpeedParams\x1a\x8a\x01\n\x15MaxAllowedSpeedParams\x12!\n\x19max_allowed_speed_horizon\x18\x01 \x01(\x02\x12%\n\x1dmax_allowed_speed_vertical_up\x18\x02 \x01(\x02\x12\'\n\x1fmax_allowed_speed_vertical_down\x18\x03 \x01(\x02\"\x10\n\x0e\x46\x43\x43ommandHover\"\x19\n\x17\x46\x43\x43ommandEmergencyBrake\"/\n\x18\x46\x43\x43ommandSmallHeightHold\x12\x13\n\x0bsend_enable\x18\x01 \x01(\x08\")\n\x12\x46\x43\x43ommandCalibrate\x12\x13\n\x0bsend_enable\x18\x01 \x01(\x08\"\xbd\x04\n\tFCCommand\x12#\n\x03\x61rm\x18\x01 \x01(\x0b\x32\x14.flight.FCCommandArmH\x00\x12)\n\x06\x64isarm\x18\x02 \x01(\x0b\x32\x17.flight.FCCommandDisarmH\x00\x12,\n\x08take_off\x18\x03 \x01(\x0b\x32\x18.flight.FCCommandTakeOffH\x00\x12%\n\x04land\x18\x04 \x01(\x0b\x32\x15.flight.FCCommandLandH\x00\x12\x32\n\x0b\x63\x61ncel_land\x18\x05 \x01(\x0b\x32\x1b.flight.FCCommandCancelLandH\x00\x12+\n\x07\x63ontrol\x18\x06 \x01(\x0b\x32\x18.flight.FCCommandControlH\x00\x12J\n\x18get_allowed_max_velocity\x18\x07 \x01(\x0b\x32&.flight.FCCommandGetAllowedMaxVelocityH\x00\x12\'\n\x05hover\x18\x08 \x01(\x0b\x32\x16.flight.FCCommandHoverH\x00\x12:\n\x0f\x65mergency_brake\x18\t \x01(\x0b\x32\x1f.flight.FCCommandEmergencyBrakeH\x00\x12=\n\x11small_height_hold\x18\n \x01(\x0b\x32 .flight.FCCommandSmallHeightHoldH\x00\x12/\n\tcalibrate\x18\x64 \x01(\x0b\x32\x1a.flight.FCCommandCalibrateH\x00\x42\t\n\x07\x63ommand\"o\n\x0c\x46\x43\x43ommandAck\x12\r\n\x05is_ok\x18\x01 \x01(\x08\x12I\n\x14\x61llowed_max_velocity\x18\x02 \x01(\x0b\x32).flight.FCCommandGetAllowedMaxVelocityAckH\x00\x42\x05\n\x03\x61\x63k\"?\n\x1b\x46lightControlTakeOffCommand\x12\x0e\n\x06height\x18\x01 \x01(\x02\x12\x10\n\x08velocity\x18\x02 \x01(\x02\"\x1d\n\x1b\x46lightControlLandingCommand\"\x1b\n\x19\x46lightControlHoverCommand\"\x1c\n\x1a\x46lightControlEmergencyStop\"S\n#FlightControlVelocityControlCommand\x12\t\n\x01x\x18\x01 \x01(\x02\x12\t\n\x01y\x18\x02 \x01(\x02\x12\t\n\x01z\x18\x03 \x01(\x02\x12\x0b\n\x03yaw\x18\x04 \x01(\x02\"\xca\x02\n\x14\x46lightControlCommand\x12\x36\n\x07takeOff\x18\x01 \x01(\x0b\x32#.flight.FlightControlTakeOffCommandH\x00\x12\x36\n\x07landing\x18\x02 \x01(\x0b\x32#.flight.FlightControlLandingCommandH\x00\x12\x46\n\x0fvelocityControl\x18\x03 \x01(\x0b\x32+.flight.FlightControlVelocityControlCommandH\x00\x12\x32\n\x05hover\x18\x04 \x01(\x0b\x32!.flight.FlightControlHoverCommandH\x00\x12;\n\remergencyStop\x18\x05 \x01(\x0b\x32\".flight.FlightControlEmergencyStopH\x00\x42\t\n\x07\x63ommand\":\n\x0eGimbalPosition\x12\x0b\n\x03yaw\x18\x01 \x01(\x02\x12\x0c\n\x04roll\x18\x02 \x01(\x02\x12\r\n\x05pitch\x18\x03 \x01(\x02\"7\n\x0bGimbalSpeed\x12\x0b\n\x03yaw\x18\x01 \x01(\x02\x12\x0c\n\x04roll\x18\x02 \x01(\x02\x12\r\n\x05pitch\x18\x03 \x01(\x02\"\xab\x01\n\rGimbalCommand\x12#\n\x02id\x18\x01 \x01(\x0e\x32\x17.flight.GimbalCommandID\x12#\n\x03pos\x18\x02 \x01(\x0b\x32\x16.flight.GimbalPosition\x12,\n\x0crelative_pos\x18\x03 \x01(\x0b\x32\x16.flight.GimbalPosition\x12\"\n\x05speed\x18\x04 \x01(\x0b\x32\x13.flight.GimbalSpeed\"\x17\n\tGimbalAck\x12\n\n\x02rc\x18\x01 \x01(\x05\"3\n\x0bGimbalState\x12$\n\x05state\x18\x01 \x01(\x0e\x32\x15.flight.GimbalStateId\"\\\n\x0cGimbalStatus\x12\"\n\x05state\x18\x01 \x01(\x0b\x32\x13.flight.GimbalState\x12(\n\x08position\x18\x02 \x01(\x0b\x32\x16.flight.GimbalPosition\"\x18\n\nControlAck\x12\n\n\x02rc\x18\x01 \x01(\x05\"\xce\x01\n\rControlStatus\x12#\n\x05state\x18\x01 \x01(\x0b\x32\x14.flight.ControlState\x12)\n\x08\x63omplete\x18\x02 \x01(\x0b\x32\x17.flight.ControlComplete\x12\x39\n\x0e\x63\x61l_imu_status\x18\x03 \x01(\x0b\x32!.flight.ControlCalibrateIMUStatus\x12\x32\n\rflying_status\x18\x04 \x01(\x0b\x32\x1b.flight.ControlFlyingStatus\"5\n\x0c\x43ontrolState\x12%\n\x05state\x18\x01 \x01(\x0e\x32\x16.flight.ControlStateID\"8\n\x0f\x43ontrolComplete\x12%\n\x02id\x18\x01 \x01(\x0e\x32\x19.flight.ControlCompleteID\"[\n\x19\x43ontrolCalibrateIMUStatus\x12-\n\x04step\x18\x01 \x01(\x0e\x32\x1f.flight.ControlCalibrateIMUStep\x12\x0f\n\x07percent\x18\x02 \x01(\r\"\x15\n\x13\x43ontrolFlyingStatus*\xf4\x01\n\x18\x46lightControlFlightState\x12\x1f\n\x1b\x46LIGHT_CONTROL_STATE_DISARM\x10\x00\x12\x1c\n\x18\x46LIGHT_CONTROL_STATE_ARM\x10\x01\x12$\n FLIGHT_CONTROL_STATE_TAKEING_OFF\x10\x02\x12\x1f\n\x1b\x46LIGHT_CONTROL_STATE_FLYING\x10\x03\x12 \n\x1c\x46LIGHT_CONTROL_STATE_LANDING\x10\x04\x12\x30\n,FLIGHT_CONTROL_STATE_PREPARE_TO_HAND_RELEASE\x10\x05*\xa7\x02\n\x1bHorizontalNavigationAbility\x12<\n8FC_HORIZONTAL_NAVIGATION_ABILITY_ACCURATE_POSITION_VALID\x10\x00\x12\x33\n/FC_HORIZONTAL_NAVIGATION_ABILITY_POSITION_VALID\x10\x01\x12\x33\n/FC_HORIZONTAL_NAVIGATION_ABILITY_VELOCITY_VALID\x10\x02\x12\x33\n/FC_HORIZONTAL_NAVIGATION_ABILITY_ATTITUDE_VALID\x10\x03\x12+\n\'FC_HORIZONTAL_NAVIGATION_ABILITY_FAILED\x10\x04*\xb4\x01\n\x19VerticalNavigationAbility\x12\x38\n4FC_VERTICAL_NAVIGATION_ABILITY_ACCURATE_HEIGHT_VALID\x10\x00\x12\x32\n.FC_VERTICAL_NAVIGATION_ABILITY_ALITITUDE_VALID\x10\x01\x12)\n%FC_VERTICAL_NAVIGATION_ABILITY_FAILED\x10\x02*\xa2\x01\n\x14YawNavigationAbility\x12.\n*FC_YAW_NAVIGATION_ABILITY_TRUE_NORTH_VALID\x10\x00\x12\x34\n0FC_YAW_NAVIGATION_ABILITY_ANGULAR_VELOCITY_VALID\x10\x01\x12$\n FC_YAW_NAVIGATION_ABILITY_FAILED\x10\x02*\x88\x01\n\x0b\x42rakeStatus\x12\x1b\n\x17\x46\x43_STATUS_NORMAL_FLYING\x10\x00\x12\x1b\n\x17\x46\x43_STATUS_FINISIH_BRAKE\x10\x01\x12\x1d\n\x19\x46\x43_STATUS_NORMAL_BRAKE_ON\x10\x02\x12 \n\x1c\x46\x43_STATUS_EMERGENCY_BRAKE_ON\x10\x03*\x8e\x01\n\x0fGimbalCommandID\x12\x13\n\x0fGIMBAL_CMD_STOP\x10\x00\x12\x16\n\x12GIMBAL_CMD_SET_POS\x10\x01\x12\x1f\n\x1bGIMBAL_CMD_SET_RELATIVE_POS\x10\x02\x12\x18\n\x14GIMBAL_CMD_SET_SPEED\x10\x03\x12\x13\n\x0fGIMBAL_CMD_LOCK\x10\x04*h\n\rGimbalStateId\x12\x16\n\x12GIMBAL_NOT_EXISTED\x10\x00\x12\x14\n\x10GIMBAL_POWER_OFF\x10\x01\x12\x13\n\x0fGIMBAL_POWER_ON\x10\x02\x12\x14\n\x10GIMBAL_PROTECTED\x10\x03*\xa4\x01\n\x0e\x43ontrolStateID\x12\x14\n\x10\x46\x43_STATE_STOPPED\x10\x00\x12\x14\n\x10\x46\x43_STATE_TAKEOFF\x10\x01\x12\x12\n\x0e\x46\x43_STATE_HOVER\x10\x02\x12\x14\n\x10\x46\x43_STATE_LANDING\x10\x03\x12\x11\n\rFC_STATE_PANO\x10\x04\x12\x13\n\x0f\x46\x43_STATE_FLYING\x10\x05\x12\x14\n\x10\x46\x43_STATE_CAL_IMU\x10\n*\x8b\x01\n\x11\x43ontrolCompleteID\x12\x18\n\x14\x46\x43_COMPLETE_TAKE_OFF\x10\x00\x12\x15\n\x11\x46\x43_COMPLETE_HOVER\x10\x01\x12\x17\n\x13\x46\x43_COMPLETE_LANDING\x10\x02\x12\x14\n\x10\x46\x43_COMPLETE_PANO\x10\x03\x12\x16\n\x12\x46\x43_COMPLETE_FLYING\x10\x04*\xbb\x01\n\x17\x43ontrolCalibrateIMUStep\x12\x18\n\x14\x46\x43_CAL_IMU_STEP_X_UP\x10\x00\x12\x1a\n\x16\x46\x43_CAL_IMU_STEP_X_DOWN\x10\x01\x12\x18\n\x14\x46\x43_CAL_IMU_STEP_Y_UP\x10\x02\x12\x1a\n\x16\x46\x43_CAL_IMU_STEP_Y_DOWN\x10\x03\x12\x18\n\x14\x46\x43_CAL_IMU_STEP_Z_UP\x10\x04\x12\x1a\n\x16\x46\x43_CAL_IMU_STEP_Z_DOWN\x10\x05\x62\x06proto3')

_FLIGHTCONTROLFLIGHTSTATE = DESCRIPTOR.enum_types_by_name['FlightControlFlightState']
FlightControlFlightState = enum_type_wrapper.EnumTypeWrapper(_FLIGHTCONTROLFLIGHTSTATE)
_HORIZONTALNAVIGATIONABILITY = DESCRIPTOR.enum_types_by_name['HorizontalNavigationAbility']
HorizontalNavigationAbility = enum_type_wrapper.EnumTypeWrapper(_HORIZONTALNAVIGATIONABILITY)
_VERTICALNAVIGATIONABILITY = DESCRIPTOR.enum_types_by_name['VerticalNavigationAbility']
VerticalNavigationAbility = enum_type_wrapper.EnumTypeWrapper(_VERTICALNAVIGATIONABILITY)
_YAWNAVIGATIONABILITY = DESCRIPTOR.enum_types_by_name['YawNavigationAbility']
YawNavigationAbility = enum_type_wrapper.EnumTypeWrapper(_YAWNAVIGATIONABILITY)
_BRAKESTATUS = DESCRIPTOR.enum_types_by_name['BrakeStatus']
BrakeStatus = enum_type_wrapper.EnumTypeWrapper(_BRAKESTATUS)
_GIMBALCOMMANDID = DESCRIPTOR.enum_types_by_name['GimbalCommandID']
GimbalCommandID = enum_type_wrapper.EnumTypeWrapper(_GIMBALCOMMANDID)
_GIMBALSTATEID = DESCRIPTOR.enum_types_by_name['GimbalStateId']
GimbalStateId = enum_type_wrapper.EnumTypeWrapper(_GIMBALSTATEID)
_CONTROLSTATEID = DESCRIPTOR.enum_types_by_name['ControlStateID']
ControlStateID = enum_type_wrapper.EnumTypeWrapper(_CONTROLSTATEID)
_CONTROLCOMPLETEID = DESCRIPTOR.enum_types_by_name['ControlCompleteID']
ControlCompleteID = enum_type_wrapper.EnumTypeWrapper(_CONTROLCOMPLETEID)
_CONTROLCALIBRATEIMUSTEP = DESCRIPTOR.enum_types_by_name['ControlCalibrateIMUStep']
ControlCalibrateIMUStep = enum_type_wrapper.EnumTypeWrapper(_CONTROLCALIBRATEIMUSTEP)
FLIGHT_CONTROL_STATE_DISARM = 0
FLIGHT_CONTROL_STATE_ARM = 1
FLIGHT_CONTROL_STATE_TAKEING_OFF = 2
FLIGHT_CONTROL_STATE_FLYING = 3
FLIGHT_CONTROL_STATE_LANDING = 4
FLIGHT_CONTROL_STATE_PREPARE_TO_HAND_RELEASE = 5
FC_HORIZONTAL_NAVIGATION_ABILITY_ACCURATE_POSITION_VALID = 0
FC_HORIZONTAL_NAVIGATION_ABILITY_POSITION_VALID = 1
FC_HORIZONTAL_NAVIGATION_ABILITY_VELOCITY_VALID = 2
FC_HORIZONTAL_NAVIGATION_ABILITY_ATTITUDE_VALID = 3
FC_HORIZONTAL_NAVIGATION_ABILITY_FAILED = 4
FC_VERTICAL_NAVIGATION_ABILITY_ACCURATE_HEIGHT_VALID = 0
FC_VERTICAL_NAVIGATION_ABILITY_ALITITUDE_VALID = 1
FC_VERTICAL_NAVIGATION_ABILITY_FAILED = 2
FC_YAW_NAVIGATION_ABILITY_TRUE_NORTH_VALID = 0
FC_YAW_NAVIGATION_ABILITY_ANGULAR_VELOCITY_VALID = 1
FC_YAW_NAVIGATION_ABILITY_FAILED = 2
FC_STATUS_NORMAL_FLYING = 0
FC_STATUS_FINISIH_BRAKE = 1
FC_STATUS_NORMAL_BRAKE_ON = 2
FC_STATUS_EMERGENCY_BRAKE_ON = 3
GIMBAL_CMD_STOP = 0
GIMBAL_CMD_SET_POS = 1
GIMBAL_CMD_SET_RELATIVE_POS = 2
GIMBAL_CMD_SET_SPEED = 3
GIMBAL_CMD_LOCK = 4
GIMBAL_NOT_EXISTED = 0
GIMBAL_POWER_OFF = 1
GIMBAL_POWER_ON = 2
GIMBAL_PROTECTED = 3
FC_STATE_STOPPED = 0
FC_STATE_TAKEOFF = 1
FC_STATE_HOVER = 2
FC_STATE_LANDING = 3
FC_STATE_PANO = 4
FC_STATE_FLYING = 5
FC_STATE_CAL_IMU = 10
FC_COMPLETE_TAKE_OFF = 0
FC_COMPLETE_HOVER = 1
FC_COMPLETE_LANDING = 2
FC_COMPLETE_PANO = 3
FC_COMPLETE_FLYING = 4
FC_CAL_IMU_STEP_X_UP = 0
FC_CAL_IMU_STEP_X_DOWN = 1
FC_CAL_IMU_STEP_Y_UP = 2
FC_CAL_IMU_STEP_Y_DOWN = 3
FC_CAL_IMU_STEP_Z_UP = 4
FC_CAL_IMU_STEP_Z_DOWN = 5


_FCNAVIGATIONINFO = DESCRIPTOR.message_types_by_name['FCNavigationInfo']
_ATTITUDEINFO = DESCRIPTOR.message_types_by_name['AttitudeInfo']
_FC = DESCRIPTOR.message_types_by_name['FC']
_ARMCHECKFAILREASON = DESCRIPTOR.message_types_by_name['ArmcheckFailReason']
_RCCOMMAND = DESCRIPTOR.message_types_by_name['RCCommand']
_FCCOMMANDARM = DESCRIPTOR.message_types_by_name['FCCommandArm']
_FCCOMMANDDISARM = DESCRIPTOR.message_types_by_name['FCCommandDisarm']
_FCCOMMANDTAKEOFF = DESCRIPTOR.message_types_by_name['FCCommandTakeOff']
_FCCOMMANDLAND = DESCRIPTOR.message_types_by_name['FCCommandLand']
_FCCOMMANDCANCELLAND = DESCRIPTOR.message_types_by_name['FCCommandCancelLand']
_FCCOMMANDCONTROL = DESCRIPTOR.message_types_by_name['FCCommandControl']
_FCCOMMANDCONTROL_HORIZONTALCONTROLATTRIBUTE = _FCCOMMANDCONTROL.nested_types_by_name['HorizontalControlAttribute']
_FCCOMMANDCONTROL_SETPOINT = _FCCOMMANDCONTROL.nested_types_by_name['SetPoint']
_FCCOMMANDGETALLOWEDMAXVELOCITY = DESCRIPTOR.message_types_by_name['FCCommandGetAllowedMaxVelocity']
_FCCOMMANDGETALLOWEDMAXVELOCITYACK = DESCRIPTOR.message_types_by_name['FCCommandGetAllowedMaxVelocityAck']
_FCCOMMANDGETALLOWEDMAXVELOCITYACK_MAXALLOWEDSPEEDPARAMS = _FCCOMMANDGETALLOWEDMAXVELOCITYACK.nested_types_by_name['MaxAllowedSpeedParams']
_FCCOMMANDHOVER = DESCRIPTOR.message_types_by_name['FCCommandHover']
_FCCOMMANDEMERGENCYBRAKE = DESCRIPTOR.message_types_by_name['FCCommandEmergencyBrake']
_FCCOMMANDSMALLHEIGHTHOLD = DESCRIPTOR.message_types_by_name['FCCommandSmallHeightHold']
_FCCOMMANDCALIBRATE = DESCRIPTOR.message_types_by_name['FCCommandCalibrate']
_FCCOMMAND = DESCRIPTOR.message_types_by_name['FCCommand']
_FCCOMMANDACK = DESCRIPTOR.message_types_by_name['FCCommandAck']
_FLIGHTCONTROLTAKEOFFCOMMAND = DESCRIPTOR.message_types_by_name['FlightControlTakeOffCommand']
_FLIGHTCONTROLLANDINGCOMMAND = DESCRIPTOR.message_types_by_name['FlightControlLandingCommand']
_FLIGHTCONTROLHOVERCOMMAND = DESCRIPTOR.message_types_by_name['FlightControlHoverCommand']
_FLIGHTCONTROLEMERGENCYSTOP = DESCRIPTOR.message_types_by_name['FlightControlEmergencyStop']
_FLIGHTCONTROLVELOCITYCONTROLCOMMAND = DESCRIPTOR.message_types_by_name['FlightControlVelocityControlCommand']
_FLIGHTCONTROLCOMMAND = DESCRIPTOR.message_types_by_name['FlightControlCommand']
_GIMBALPOSITION = DESCRIPTOR.message_types_by_name['GimbalPosition']
_GIMBALSPEED = DESCRIPTOR.message_types_by_name['GimbalSpeed']
_GIMBALCOMMAND = DESCRIPTOR.message_types_by_name['GimbalCommand']
_GIMBALACK = DESCRIPTOR.message_types_by_name['GimbalAck']
_GIMBALSTATE = DESCRIPTOR.message_types_by_name['GimbalState']
_GIMBALSTATUS = DESCRIPTOR.message_types_by_name['GimbalStatus']
_CONTROLACK = DESCRIPTOR.message_types_by_name['ControlAck']
_CONTROLSTATUS = DESCRIPTOR.message_types_by_name['ControlStatus']
_CONTROLSTATE = DESCRIPTOR.message_types_by_name['ControlState']
_CONTROLCOMPLETE = DESCRIPTOR.message_types_by_name['ControlComplete']
_CONTROLCALIBRATEIMUSTATUS = DESCRIPTOR.message_types_by_name['ControlCalibrateIMUStatus']
_CONTROLFLYINGSTATUS = DESCRIPTOR.message_types_by_name['ControlFlyingStatus']
_FCCOMMANDCONTROL_HORIZONTALCONTROLTYPE = _FCCOMMANDCONTROL.enum_types_by_name['HorizontalControlType']
_FCCOMMANDCONTROL_VERTICALCONTROLTYPE = _FCCOMMANDCONTROL.enum_types_by_name['VerticalControlType']
_FCCOMMANDCONTROL_YAWCONTROLTYPE = _FCCOMMANDCONTROL.enum_types_by_name['YawControlType']
FCNavigationInfo = _reflection.GeneratedProtocolMessageType('FCNavigationInfo', (_message.Message,), {
  'DESCRIPTOR' : _FCNAVIGATIONINFO,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCNavigationInfo)
  })
_sym_db.RegisterMessage(FCNavigationInfo)

AttitudeInfo = _reflection.GeneratedProtocolMessageType('AttitudeInfo', (_message.Message,), {
  'DESCRIPTOR' : _ATTITUDEINFO,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.AttitudeInfo)
  })
_sym_db.RegisterMessage(AttitudeInfo)

FC = _reflection.GeneratedProtocolMessageType('FC', (_message.Message,), {
  'DESCRIPTOR' : _FC,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FC)
  })
_sym_db.RegisterMessage(FC)

ArmcheckFailReason = _reflection.GeneratedProtocolMessageType('ArmcheckFailReason', (_message.Message,), {
  'DESCRIPTOR' : _ARMCHECKFAILREASON,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.ArmcheckFailReason)
  })
_sym_db.RegisterMessage(ArmcheckFailReason)

RCCommand = _reflection.GeneratedProtocolMessageType('RCCommand', (_message.Message,), {
  'DESCRIPTOR' : _RCCOMMAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.RCCommand)
  })
_sym_db.RegisterMessage(RCCommand)

FCCommandArm = _reflection.GeneratedProtocolMessageType('FCCommandArm', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDARM,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandArm)
  })
_sym_db.RegisterMessage(FCCommandArm)

FCCommandDisarm = _reflection.GeneratedProtocolMessageType('FCCommandDisarm', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDDISARM,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandDisarm)
  })
_sym_db.RegisterMessage(FCCommandDisarm)

FCCommandTakeOff = _reflection.GeneratedProtocolMessageType('FCCommandTakeOff', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDTAKEOFF,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandTakeOff)
  })
_sym_db.RegisterMessage(FCCommandTakeOff)

FCCommandLand = _reflection.GeneratedProtocolMessageType('FCCommandLand', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDLAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandLand)
  })
_sym_db.RegisterMessage(FCCommandLand)

FCCommandCancelLand = _reflection.GeneratedProtocolMessageType('FCCommandCancelLand', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDCANCELLAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandCancelLand)
  })
_sym_db.RegisterMessage(FCCommandCancelLand)

FCCommandControl = _reflection.GeneratedProtocolMessageType('FCCommandControl', (_message.Message,), {

  'HorizontalControlAttribute' : _reflection.GeneratedProtocolMessageType('HorizontalControlAttribute', (_message.Message,), {
    'DESCRIPTOR' : _FCCOMMANDCONTROL_HORIZONTALCONTROLATTRIBUTE,
    '__module__' : 'fc_pb2'
    # @@protoc_insertion_point(class_scope:flight.FCCommandControl.HorizontalControlAttribute)
    })
  ,

  'SetPoint' : _reflection.GeneratedProtocolMessageType('SetPoint', (_message.Message,), {
    'DESCRIPTOR' : _FCCOMMANDCONTROL_SETPOINT,
    '__module__' : 'fc_pb2'
    # @@protoc_insertion_point(class_scope:flight.FCCommandControl.SetPoint)
    })
  ,
  'DESCRIPTOR' : _FCCOMMANDCONTROL,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandControl)
  })
_sym_db.RegisterMessage(FCCommandControl)
_sym_db.RegisterMessage(FCCommandControl.HorizontalControlAttribute)
_sym_db.RegisterMessage(FCCommandControl.SetPoint)

FCCommandGetAllowedMaxVelocity = _reflection.GeneratedProtocolMessageType('FCCommandGetAllowedMaxVelocity', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDGETALLOWEDMAXVELOCITY,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandGetAllowedMaxVelocity)
  })
_sym_db.RegisterMessage(FCCommandGetAllowedMaxVelocity)

FCCommandGetAllowedMaxVelocityAck = _reflection.GeneratedProtocolMessageType('FCCommandGetAllowedMaxVelocityAck', (_message.Message,), {

  'MaxAllowedSpeedParams' : _reflection.GeneratedProtocolMessageType('MaxAllowedSpeedParams', (_message.Message,), {
    'DESCRIPTOR' : _FCCOMMANDGETALLOWEDMAXVELOCITYACK_MAXALLOWEDSPEEDPARAMS,
    '__module__' : 'fc_pb2'
    # @@protoc_insertion_point(class_scope:flight.FCCommandGetAllowedMaxVelocityAck.MaxAllowedSpeedParams)
    })
  ,
  'DESCRIPTOR' : _FCCOMMANDGETALLOWEDMAXVELOCITYACK,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandGetAllowedMaxVelocityAck)
  })
_sym_db.RegisterMessage(FCCommandGetAllowedMaxVelocityAck)
_sym_db.RegisterMessage(FCCommandGetAllowedMaxVelocityAck.MaxAllowedSpeedParams)

FCCommandHover = _reflection.GeneratedProtocolMessageType('FCCommandHover', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDHOVER,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandHover)
  })
_sym_db.RegisterMessage(FCCommandHover)

FCCommandEmergencyBrake = _reflection.GeneratedProtocolMessageType('FCCommandEmergencyBrake', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDEMERGENCYBRAKE,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandEmergencyBrake)
  })
_sym_db.RegisterMessage(FCCommandEmergencyBrake)

FCCommandSmallHeightHold = _reflection.GeneratedProtocolMessageType('FCCommandSmallHeightHold', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDSMALLHEIGHTHOLD,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandSmallHeightHold)
  })
_sym_db.RegisterMessage(FCCommandSmallHeightHold)

FCCommandCalibrate = _reflection.GeneratedProtocolMessageType('FCCommandCalibrate', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDCALIBRATE,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandCalibrate)
  })
_sym_db.RegisterMessage(FCCommandCalibrate)

FCCommand = _reflection.GeneratedProtocolMessageType('FCCommand', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommand)
  })
_sym_db.RegisterMessage(FCCommand)

FCCommandAck = _reflection.GeneratedProtocolMessageType('FCCommandAck', (_message.Message,), {
  'DESCRIPTOR' : _FCCOMMANDACK,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FCCommandAck)
  })
_sym_db.RegisterMessage(FCCommandAck)

FlightControlTakeOffCommand = _reflection.GeneratedProtocolMessageType('FlightControlTakeOffCommand', (_message.Message,), {
  'DESCRIPTOR' : _FLIGHTCONTROLTAKEOFFCOMMAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FlightControlTakeOffCommand)
  })
_sym_db.RegisterMessage(FlightControlTakeOffCommand)

FlightControlLandingCommand = _reflection.GeneratedProtocolMessageType('FlightControlLandingCommand', (_message.Message,), {
  'DESCRIPTOR' : _FLIGHTCONTROLLANDINGCOMMAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FlightControlLandingCommand)
  })
_sym_db.RegisterMessage(FlightControlLandingCommand)

FlightControlHoverCommand = _reflection.GeneratedProtocolMessageType('FlightControlHoverCommand', (_message.Message,), {
  'DESCRIPTOR' : _FLIGHTCONTROLHOVERCOMMAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FlightControlHoverCommand)
  })
_sym_db.RegisterMessage(FlightControlHoverCommand)

FlightControlEmergencyStop = _reflection.GeneratedProtocolMessageType('FlightControlEmergencyStop', (_message.Message,), {
  'DESCRIPTOR' : _FLIGHTCONTROLEMERGENCYSTOP,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FlightControlEmergencyStop)
  })
_sym_db.RegisterMessage(FlightControlEmergencyStop)

FlightControlVelocityControlCommand = _reflection.GeneratedProtocolMessageType('FlightControlVelocityControlCommand', (_message.Message,), {
  'DESCRIPTOR' : _FLIGHTCONTROLVELOCITYCONTROLCOMMAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FlightControlVelocityControlCommand)
  })
_sym_db.RegisterMessage(FlightControlVelocityControlCommand)

FlightControlCommand = _reflection.GeneratedProtocolMessageType('FlightControlCommand', (_message.Message,), {
  'DESCRIPTOR' : _FLIGHTCONTROLCOMMAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.FlightControlCommand)
  })
_sym_db.RegisterMessage(FlightControlCommand)

GimbalPosition = _reflection.GeneratedProtocolMessageType('GimbalPosition', (_message.Message,), {
  'DESCRIPTOR' : _GIMBALPOSITION,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.GimbalPosition)
  })
_sym_db.RegisterMessage(GimbalPosition)

GimbalSpeed = _reflection.GeneratedProtocolMessageType('GimbalSpeed', (_message.Message,), {
  'DESCRIPTOR' : _GIMBALSPEED,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.GimbalSpeed)
  })
_sym_db.RegisterMessage(GimbalSpeed)

GimbalCommand = _reflection.GeneratedProtocolMessageType('GimbalCommand', (_message.Message,), {
  'DESCRIPTOR' : _GIMBALCOMMAND,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.GimbalCommand)
  })
_sym_db.RegisterMessage(GimbalCommand)

GimbalAck = _reflection.GeneratedProtocolMessageType('GimbalAck', (_message.Message,), {
  'DESCRIPTOR' : _GIMBALACK,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.GimbalAck)
  })
_sym_db.RegisterMessage(GimbalAck)

GimbalState = _reflection.GeneratedProtocolMessageType('GimbalState', (_message.Message,), {
  'DESCRIPTOR' : _GIMBALSTATE,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.GimbalState)
  })
_sym_db.RegisterMessage(GimbalState)

GimbalStatus = _reflection.GeneratedProtocolMessageType('GimbalStatus', (_message.Message,), {
  'DESCRIPTOR' : _GIMBALSTATUS,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.GimbalStatus)
  })
_sym_db.RegisterMessage(GimbalStatus)

ControlAck = _reflection.GeneratedProtocolMessageType('ControlAck', (_message.Message,), {
  'DESCRIPTOR' : _CONTROLACK,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.ControlAck)
  })
_sym_db.RegisterMessage(ControlAck)

ControlStatus = _reflection.GeneratedProtocolMessageType('ControlStatus', (_message.Message,), {
  'DESCRIPTOR' : _CONTROLSTATUS,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.ControlStatus)
  })
_sym_db.RegisterMessage(ControlStatus)

ControlState = _reflection.GeneratedProtocolMessageType('ControlState', (_message.Message,), {
  'DESCRIPTOR' : _CONTROLSTATE,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.ControlState)
  })
_sym_db.RegisterMessage(ControlState)

ControlComplete = _reflection.GeneratedProtocolMessageType('ControlComplete', (_message.Message,), {
  'DESCRIPTOR' : _CONTROLCOMPLETE,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.ControlComplete)
  })
_sym_db.RegisterMessage(ControlComplete)

ControlCalibrateIMUStatus = _reflection.GeneratedProtocolMessageType('ControlCalibrateIMUStatus', (_message.Message,), {
  'DESCRIPTOR' : _CONTROLCALIBRATEIMUSTATUS,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.ControlCalibrateIMUStatus)
  })
_sym_db.RegisterMessage(ControlCalibrateIMUStatus)

ControlFlyingStatus = _reflection.GeneratedProtocolMessageType('ControlFlyingStatus', (_message.Message,), {
  'DESCRIPTOR' : _CONTROLFLYINGSTATUS,
  '__module__' : 'fc_pb2'
  # @@protoc_insertion_point(class_scope:flight.ControlFlyingStatus)
  })
_sym_db.RegisterMessage(ControlFlyingStatus)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _FLIGHTCONTROLFLIGHTSTATE._serialized_start=6012
  _FLIGHTCONTROLFLIGHTSTATE._serialized_end=6256
  _HORIZONTALNAVIGATIONABILITY._serialized_start=6259
  _HORIZONTALNAVIGATIONABILITY._serialized_end=6554
  _VERTICALNAVIGATIONABILITY._serialized_start=6557
  _VERTICALNAVIGATIONABILITY._serialized_end=6737
  _YAWNAVIGATIONABILITY._serialized_start=6740
  _YAWNAVIGATIONABILITY._serialized_end=6902
  _BRAKESTATUS._serialized_start=6905
  _BRAKESTATUS._serialized_end=7041
  _GIMBALCOMMANDID._serialized_start=7044
  _GIMBALCOMMANDID._serialized_end=7186
  _GIMBALSTATEID._serialized_start=7188
  _GIMBALSTATEID._serialized_end=7292
  _CONTROLSTATEID._serialized_start=7295
  _CONTROLSTATEID._serialized_end=7459
  _CONTROLCOMPLETEID._serialized_start=7462
  _CONTROLCOMPLETEID._serialized_end=7601
  _CONTROLCALIBRATEIMUSTEP._serialized_start=7604
  _CONTROLCALIBRATEIMUSTEP._serialized_end=7791
  _FCNAVIGATIONINFO._serialized_start=33
  _FCNAVIGATIONINFO._serialized_end=1034
  _ATTITUDEINFO._serialized_start=1037
  _ATTITUDEINFO._serialized_end=1241
  _FC._serialized_start=1244
  _FC._serialized_end=1374
  _ARMCHECKFAILREASON._serialized_start=1377
  _ARMCHECKFAILREASON._serialized_end=2055
  _RCCOMMAND._serialized_start=2057
  _RCCOMMAND._serialized_end=2169
  _FCCOMMANDARM._serialized_start=2171
  _FCCOMMANDARM._serialized_end=2185
  _FCCOMMANDDISARM._serialized_start=2187
  _FCCOMMANDDISARM._serialized_end=2204
  _FCCOMMANDTAKEOFF._serialized_start=2206
  _FCCOMMANDTAKEOFF._serialized_end=2224
  _FCCOMMANDLAND._serialized_start=2226
  _FCCOMMANDLAND._serialized_end=2241
  _FCCOMMANDCANCELLAND._serialized_start=2243
  _FCCOMMANDCANCELLAND._serialized_end=2264
  _FCCOMMANDCONTROL._serialized_start=2267
  _FCCOMMANDCONTROL._serialized_end=3389
  _FCCOMMANDCONTROL_HORIZONTALCONTROLATTRIBUTE._serialized_start=2340
  _FCCOMMANDCONTROL_HORIZONTALCONTROLATTRIBUTE._serialized_end=2465
  _FCCOMMANDCONTROL_SETPOINT._serialized_start=2468
  _FCCOMMANDCONTROL_SETPOINT._serialized_end=2919
  _FCCOMMANDCONTROL_HORIZONTALCONTROLTYPE._serialized_start=2922
  _FCCOMMANDCONTROL_HORIZONTALCONTROLTYPE._serialized_end=3102
  _FCCOMMANDCONTROL_VERTICALCONTROLTYPE._serialized_start=3105
  _FCCOMMANDCONTROL_VERTICALCONTROLTYPE._serialized_end=3269
  _FCCOMMANDCONTROL_YAWCONTROLTYPE._serialized_start=3271
  _FCCOMMANDCONTROL_YAWCONTROLTYPE._serialized_end=3389
  _FCCOMMANDGETALLOWEDMAXVELOCITY._serialized_start=3391
  _FCCOMMANDGETALLOWEDMAXVELOCITY._serialized_end=3423
  _FCCOMMANDGETALLOWEDMAXVELOCITYACK._serialized_start=3426
  _FCCOMMANDGETALLOWEDMAXVELOCITYACK._serialized_end=3683
  _FCCOMMANDGETALLOWEDMAXVELOCITYACK_MAXALLOWEDSPEEDPARAMS._serialized_start=3545
  _FCCOMMANDGETALLOWEDMAXVELOCITYACK_MAXALLOWEDSPEEDPARAMS._serialized_end=3683
  _FCCOMMANDHOVER._serialized_start=3685
  _FCCOMMANDHOVER._serialized_end=3701
  _FCCOMMANDEMERGENCYBRAKE._serialized_start=3703
  _FCCOMMANDEMERGENCYBRAKE._serialized_end=3728
  _FCCOMMANDSMALLHEIGHTHOLD._serialized_start=3730
  _FCCOMMANDSMALLHEIGHTHOLD._serialized_end=3777
  _FCCOMMANDCALIBRATE._serialized_start=3779
  _FCCOMMANDCALIBRATE._serialized_end=3820
  _FCCOMMAND._serialized_start=3823
  _FCCOMMAND._serialized_end=4396
  _FCCOMMANDACK._serialized_start=4398
  _FCCOMMANDACK._serialized_end=4509
  _FLIGHTCONTROLTAKEOFFCOMMAND._serialized_start=4511
  _FLIGHTCONTROLTAKEOFFCOMMAND._serialized_end=4574
  _FLIGHTCONTROLLANDINGCOMMAND._serialized_start=4576
  _FLIGHTCONTROLLANDINGCOMMAND._serialized_end=4605
  _FLIGHTCONTROLHOVERCOMMAND._serialized_start=4607
  _FLIGHTCONTROLHOVERCOMMAND._serialized_end=4634
  _FLIGHTCONTROLEMERGENCYSTOP._serialized_start=4636
  _FLIGHTCONTROLEMERGENCYSTOP._serialized_end=4664
  _FLIGHTCONTROLVELOCITYCONTROLCOMMAND._serialized_start=4666
  _FLIGHTCONTROLVELOCITYCONTROLCOMMAND._serialized_end=4749
  _FLIGHTCONTROLCOMMAND._serialized_start=4752
  _FLIGHTCONTROLCOMMAND._serialized_end=5082
  _GIMBALPOSITION._serialized_start=5084
  _GIMBALPOSITION._serialized_end=5142
  _GIMBALSPEED._serialized_start=5144
  _GIMBALSPEED._serialized_end=5199
  _GIMBALCOMMAND._serialized_start=5202
  _GIMBALCOMMAND._serialized_end=5373
  _GIMBALACK._serialized_start=5375
  _GIMBALACK._serialized_end=5398
  _GIMBALSTATE._serialized_start=5400
  _GIMBALSTATE._serialized_end=5451
  _GIMBALSTATUS._serialized_start=5453
  _GIMBALSTATUS._serialized_end=5545
  _CONTROLACK._serialized_start=5547
  _CONTROLACK._serialized_end=5571
  _CONTROLSTATUS._serialized_start=5574
  _CONTROLSTATUS._serialized_end=5780
  _CONTROLSTATE._serialized_start=5782
  _CONTROLSTATE._serialized_end=5835
  _CONTROLCOMPLETE._serialized_start=5837
  _CONTROLCOMPLETE._serialized_end=5893
  _CONTROLCALIBRATEIMUSTATUS._serialized_start=5895
  _CONTROLCALIBRATEIMUSTATUS._serialized_end=5986
  _CONTROLFLYINGSTATUS._serialized_start=5988
  _CONTROLFLYINGSTATUS._serialized_end=6009
# @@protoc_insertion_point(module_scope)
