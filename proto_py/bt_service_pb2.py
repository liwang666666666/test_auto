# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bt_service.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10\x62t_service.proto\x12\nbt_service\"~\n\x10\x42TServiceRequest\x12\x1a\n\x10set_name_request\x18\x02 \x01(\tH\x00\x12\x1a\n\x10get_name_request\x18\x03 \x01(\x08H\x00\x12\'\n\x1dget_connection_status_request\x18\x04 \x01(\x08H\x00\x42\t\n\x07request\"w\n\x11\x42TServiceResponse\x12\x0f\n\x07success\x18\x02 \x01(\x08\x12\x1b\n\x11get_name_response\x18\x03 \x01(\tH\x00\x12(\n\x1eget_connection_status_response\x18\x04 \x01(\x08H\x00\x42\n\n\x08responseb\x06proto3')



_BTSERVICEREQUEST = DESCRIPTOR.message_types_by_name['BTServiceRequest']
_BTSERVICERESPONSE = DESCRIPTOR.message_types_by_name['BTServiceResponse']
BTServiceRequest = _reflection.GeneratedProtocolMessageType('BTServiceRequest', (_message.Message,), {
  'DESCRIPTOR' : _BTSERVICEREQUEST,
  '__module__' : 'bt_service_pb2'
  # @@protoc_insertion_point(class_scope:bt_service.BTServiceRequest)
  })
_sym_db.RegisterMessage(BTServiceRequest)

BTServiceResponse = _reflection.GeneratedProtocolMessageType('BTServiceResponse', (_message.Message,), {
  'DESCRIPTOR' : _BTSERVICERESPONSE,
  '__module__' : 'bt_service_pb2'
  # @@protoc_insertion_point(class_scope:bt_service.BTServiceResponse)
  })
_sym_db.RegisterMessage(BTServiceResponse)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _BTSERVICEREQUEST._serialized_start=32
  _BTSERVICEREQUEST._serialized_end=158
  _BTSERVICERESPONSE._serialized_start=160
  _BTSERVICERESPONSE._serialized_end=279
# @@protoc_insertion_point(module_scope)
