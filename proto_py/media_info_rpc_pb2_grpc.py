# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_types_pb2 as common__types__pb2
import media_info_rpc_pb2 as media__info__rpc__pb2


class MediaRpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartInfoNotify = channel.unary_unary(
                '/h130.MediaRpc/StartInfoNotify',
                request_serializer=common__types__pb2.MediaCountsMessage.SerializeToString,
                response_deserializer=media__info__rpc__pb2.CommandAck.FromString,
                )
        self.CaptureMediaData = channel.unary_unary(
                '/h130.MediaRpc/CaptureMediaData',
                request_serializer=media__info__rpc__pb2.InsertDataToDb.SerializeToString,
                response_deserializer=media__info__rpc__pb2.CommandAck.FromString,
                )


class MediaRpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartInfoNotify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CaptureMediaData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaRpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartInfoNotify': grpc.unary_unary_rpc_method_handler(
                    servicer.StartInfoNotify,
                    request_deserializer=common__types__pb2.MediaCountsMessage.FromString,
                    response_serializer=media__info__rpc__pb2.CommandAck.SerializeToString,
            ),
            'CaptureMediaData': grpc.unary_unary_rpc_method_handler(
                    servicer.CaptureMediaData,
                    request_deserializer=media__info__rpc__pb2.InsertDataToDb.FromString,
                    response_serializer=media__info__rpc__pb2.CommandAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'h130.MediaRpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MediaRpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartInfoNotify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/h130.MediaRpc/StartInfoNotify',
            common__types__pb2.MediaCountsMessage.SerializeToString,
            media__info__rpc__pb2.CommandAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CaptureMediaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/h130.MediaRpc/CaptureMediaData',
            media__info__rpc__pb2.InsertDataToDb.SerializeToString,
            media__info__rpc__pb2.CommandAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
