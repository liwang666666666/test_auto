syntax = "proto2";

package h130;

option objc_class_prefix = "H130PB";
option java_package = "cn.zerozero.proto.h130";
option java_multiple_files = true;

import "common_types.proto";

/**
 * Time related data.
 */
message TimeData {
  // Precise when available, estimated otherwise.
  optional uint64 capture_utc = 1;

  // Will present when the capture time is unknown for further estimation of capture_utc.
  optional uint64 since_system_boot_sec = 2;
}

/**
 * Video codec type
 */
enum VideoCodec {
  // Video code is unknown
  UNKNOWN_UNSET = 0;
  // AVC
  AVC = 1;
  // HEVC
  HEVC = 2;
}

/**
 * Dropped frames counter since the beginning of current snap
 */
message DroppedFramesData {
  // vin0_cnt
  optional int32 vin0_cnt = 1;
  // vin1_cnt
  optional int32 vin1_cnt = 2;
}

/**
 * Video specific data. Presents only for video.
 */
message VideoData {
  // video duration
  optional int32 duration_ms = 1;
  // code type
  optional VideoCodec codec = 2;
  // dropped frames data
  optional DroppedFramesData dropped_frames_data = 3;
}

/**
 * Image specific data. Presents only for picture mode.
 */
message ImageData {
  message Burst {
    // index
    optional int32 index = 1;
    // length
    optional int32 length = 2;
    // frame rate
    optional int32 frame_rate = 3;
    // first image id
    optional string first_image_uuid = 4;
  }
  // burst
  optional Burst burst = 1;
}

/**
 * Sensor specific data.
 */
message CameraSensorData {
  // Analog gain
  optional uint32 agc = 1;
  // Digital gain
  optional uint32 dgc = 2;
  // Exposure table index
  optional uint32 start_ev_index = 3;
  // Exposure table index
  optional uint32 end_ev_index = 4;
  // VIN0 (aka right camera) start temp
  optional int32  start_temperature = 5;
  // VIN0 end temp
  optional int32  end_temperature = 6;
  // shutter time us
  optional uint32 shutter_time_us = 7;
  // als value
  optional uint32 als_value = 8;
  // als ev lut index
  optional uint32 als_ev_lut_index = 9;
  // VIN1 (aka left camera) start temp
  optional int32  start_temperature_vin1 = 10;
  // VIN1 end temp
  optional int32  end_temperature_vin1 = 11;
}

/**
 * This enum is used just as constant integer and not intended to be extended further.
 */
enum RandomBytes {
  // Enum must start with 0
  DUMMY_UNSET = 0;
  // size
  SIZE = 48;
}

/**
 * Firmware version.
 */
message FirmwareVersion {
  // git commit
  optional string git_commit = 1;
  // git tag
  optional string git_tag = 2;
  // git branch
  optional string git_branch = 3;
}

/**
* Flight Data
*/
message FlightData {
  // the flight mode used to capture this media
  optional FlightModeConfig flight_mode = 1;

  // a uuid that identifies the flight during which this media was captured
  optional string flight_uuid = 2;
}

/**
 * Video or Picture metadata protobuf stored in metadata files.
 */
message MediaFileMetadata {
  // video data
  optional VideoData video_data = 1;
  // image data
  optional ImageData image_data = 2;
  // system state data
  optional SystemState system_state_data = 3;
  // camera sensor data
  optional CameraSensorData camera_sensor_data = 4;
  // random bytes
  optional bytes random_bytes = 5;
  // time
  optional TimeData time = 6;
  // firmware version
  optional FirmwareVersion fw_version = 7;
  // location
  optional LocationData location = 8;
  // flight data
  optional FlightData flight_data = 9;
  // group id, Presents only for continuous picture mode.
  optional string group_id = 10;

  // generic asset metadata array
  repeated GenericAssetsMetadata generic_asset_metadata = 20;
}

message Asset {

  // Required: unique identifier
  optional string id = 1;

  // Describes the content
  enum AssetType {
    // unknown asset type
    UNSET = 0;
    // sixdof file
    SIXDOF = 1;
  }

  // the asset type
  optional AssetType type = 2;
}

message GenericAssetsMetadata {
  // Generic asset file uri
  optional string file_identifier = 1;
  // Contains asset id and asset type
  optional Asset asset = 2;
  // Size of the generic asset
  optional uint32 size = 3;
}

/**
* Sixdof data protobuf, stored in sixdof files
*/

// Camera data for sixdof
message CameraData {
  // image width
  optional int32 width = 1;
  // image height
  optional int32 height = 2;
  // focal length
  optional double focal_length = 3;
  // principal point x
  optional float principal_point_x = 4;
  // principal point y
  optional float principal_point_y = 5;
}

// sixdof attitude frame
message AttitudeFrame {
  message Translation {
     // x translation in meters
     optional float x = 1;
     // y translation in meters
     optional float y = 2;
     // z translation in meters
     optional float z = 3;
  }

  message Quaternion {
     // w
     optional float w = 1;
     // x
     optional float x = 2;
     // y
     optional float y = 3;
     // z
     optional float z = 4;
  }

  // milliseconds since video start
  optional int64 timestamp_msec = 1;
  // frame translation
  optional Translation translation = 2;
  // quaternion
  optional Quaternion quaternion = 3;
}

// the main sixdof structure
message SixDof {
  // array of attitude frames
  repeated AttitudeFrame attitude_data = 1;
  // camera data
  optional CameraData camera_data = 2;
  // frames per second
  optional float video_fps = 3;
}
